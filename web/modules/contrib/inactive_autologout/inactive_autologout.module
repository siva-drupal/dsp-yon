<?php

use Drupal\Core\Session\AnonymousUserSession;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments() for adding any library.
 */
function inactive_autologout_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'inactive_autologout/user_autologout';

  // Autologout variables pass.
  $config = \Drupal::config('inactive_autologout.settings');
  $cu = \Drupal::currentUser();
  $roles = $cu->getRoles();

  $execute = FALSE;

  if ($config->get('enable')) {
    foreach ($config->get('roles') as $id => $checked) {
      if ($checked !== 0 && in_array($id, $roles)) {
        $execute = TRUE;
        break;
      }
    }
  }

  //site base url
  $site_base_url = Url::fromUri('internal:/')->setAbsolute()->toString();
  $attachments['#attached']['drupalSettings']['baseUrl'] = $site_base_url;
  $attachments['#attached']['drupalSettings']['inactive_autologout']['timeout'] = $config->get('timeout') * 1000;
  $attachments['#attached']['drupalSettings']['inactive_autologout']['execute'] = $execute;
  $attachments['#attached']['drupalSettings']['inactive_autologout']['enable'] = $config->get('enable');
}

/**
 * Logs the current user out.
 */
function custom_user_logout() {
  $user = \Drupal::currentUser();
  \Drupal::logger('user')
    ->notice('Session closed for %name.', ['%name' => $user->getAccountName()]);
  // Destroy the current session, and reset $user to the anonymous user.
  // Note: In Symfony the session is intended to be destroyed with
  // Session::invalidate(). Regrettably this method is currently broken and may
  // lead to the creation of spurious session records in the database.
  // @see https://github.com/symfony/symfony/issues/12375
  \Drupal::service('session_manager')->destroy();
  $user->setAccount(new AnonymousUserSession());
}
